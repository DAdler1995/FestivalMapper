name: Android CI (Signed APK only)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: macos-14

    env:
      DOTNET_NOLOGO: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      MAUI_PROJECT: FestivalMapper.App/FestivalMapper.App.csproj
      PUBLISH_DIR: ${{ github.workspace }}/publish-android

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 9.x SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Dotnet info
        run: dotnet --info

      - name: Install MAUI Android workload
        run: |
          dotnet workload install maui-android
          dotnet workload list

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # ðŸ”§ Restore *Android TFM only* so it won't require iOS workloads
      - name: Restore NuGet (Android only)
        run: dotnet restore "$MAUI_PROJECT" -p:TargetFramework=net9.0-android

      # Android Gradle Plugin requires JDK 17
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Accept Android SDK licenses (best effort)
        shell: bash
        run: |
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true

      # ---- Require signing secrets; fail fast if any are missing ----
      - name: Validate signing secrets
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64:  ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS:        ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD:     ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          for v in ANDROID_KEYSTORE_BASE64 ANDROID_KEYSTORE_PASSWORD ANDROID_KEY_ALIAS ANDROID_KEY_PASSWORD; do
            if [ -z "${!v:-}" ]; then
              echo "::error::Missing required secret: $v"
              exit 1
            fi
          done

      # ---- Recreate keystore from Base64 (no heredoc, YAML-safe) ----
      - name: Restore signing keystore
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          python3 -c "import os,base64,sys; b64=os.environ.get('ANDROID_KEYSTORE_BASE64',''); \
          (open('signing.keystore','wb').write(base64.b64decode(b64)) if b64 else sys.exit('ANDROID_KEYSTORE_BASE64 is empty')); \
          print('signing.keystore written')"

      # ---- Publish SIGNED APK (only path) ----
      - name: Publish signed APK
        shell: bash
        env:
          ANDROID_KEY_ALIAS:         ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD:      ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        run: |
          mkdir -p "$PUBLISH_DIR"
          dotnet publish "$MAUI_PROJECT" \
            -f net9.0-android -c Release \
            -p:AndroidPackageFormats=apk \
            -p:AndroidKeyStore=true \
            -p:AndroidSigningKeyStore=signing.keystore \
            -p:AndroidSigningKeyAlias="$ANDROID_KEY_ALIAS" \
            -p:AndroidSigningKeyPass="$ANDROID_KEY_PASSWORD" \
            -p:AndroidSigningStorePass="$ANDROID_KEYSTORE_PASSWORD" \
            -o "$PUBLISH_DIR"
          echo "APK files in $PUBLISH_DIR:"
          ls -la "$PUBLISH_DIR"
          # ensure keystore never ends up in artifacts
          rm -f signing.keystore

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: FestivalMapper-APK
          path: |
            ${{ env.PUBLISH_DIR }}/*.apk
            **/bin/Release/net9.0-android/publish/*.apk
          if-no-files-found: error
