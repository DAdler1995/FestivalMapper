@using FestivalMapper.App.Services
@using FestivalMapper.App.Models
@using FestivalMapper.App.Libraries

@inject MapStorageService MapStorageService
@inject NavigationManager NavigationManager

@page "/"

<PageTitle>Home</PageTitle>

<div class="d-flex flex-row mb-3">
	<button class="btn btn-primary" @onclick="ImportMapFromFile">📂 Import Map</button>
	<button class="ms-auto btn btn-primary" @onclick="CreateNewMap">Create New Map</button>
</div>

@if (SavedMaps.Any())
{
    <h6>Saved Maps</h6>
    <ul class="list-group">
        @foreach (var savedMap in SavedMaps)
        {
            <li class="list-group-item d-flex flex-row" style="cursor: pointer;" @onclick="() => LoadSelectedMap(savedMap)">
                <div class="flex-grow-1 align-self-center">@savedMap.FestivalName</div>
				<button class="btn btn-sm btn-outline-danger"
						@onclick:stopPropagation="true"
						@onclick="() => DeleteMap(savedMap)">
					🗑️
				</button>
            </li>
        }
    </ul>
}

@code {
	[Inject] private IJSRuntime JS { get; set; }

	private List<FestivalMap> SavedMaps = new();



	protected override async Task OnInitializedAsync()
	{
		await LoadMaps();
	}


	private void CreateNewMap()
	{
		NavigationManager.NavigateTo($"/Map");
	}

	private void LoadSelectedMap(FestivalMap map)
	{
		NavigationManager.NavigateTo($"/Map/{map.FestivalName}");
	}

	private async Task DeleteMap(FestivalMap map)
	{
		var confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the \"{map.FestivalName}\" festival map?");
		if (confirm)
		{
			await MapStorageService.DeleteMapAsync(map.FestivalName);
			await LoadMaps();
		}
	}

	private async Task LoadMaps()
	{
		SavedMaps = await MapStorageService.LoadAllMapsAsync();
	}

	private async Task ImportMapFromFile()
	{
		try
		{
			var file = await FilePicker.Default.PickAsync(new PickOptions
			{
				PickerTitle = "Select Festival Map",
				FileTypes = FileTypeHelper.FestivalMap
			});

			if (file != null)
			{
				FestivalMap? importedFestivalMap = await MapStorageService.ImportMapAsync(file);
				if (importedFestivalMap != null)
				{
					NavigationManager.NavigateTo($"/Map/{importedFestivalMap.FestivalName}");
				}
			}
		}
		catch (Exception)
		{

		}
	}

}
