@using System 
@using System.IO
@using FestivalMapper.App.Components.Modals
@using FestivalMapper.App.Services
@using FestivalMapper.App.Models
@using FestivalMapper.App.Libraries

@inject ImagePickerService ImagePickerService
@inject MapStorageService MapStorageService
@inject NavigationManager NavigationManager

@page "/map/{FestivalId}"
@page "/map"

<PageTitle>Festival Map</PageTitle>

<div class="container-fluid">
	@if (!string.IsNullOrEmpty(FestivalMap.FestivalMapBase64))
	{
		<div class="row">
			<div class="input-group">
				<span class="input-group-text">Festival Name</span>
				<input @bind="FestivalMap.FestivalName" @onblur="TriggerAutoSave" class="form-control" />
			</div>
			
			<p class="small">@LastSaved</p>

			<div class="input-group mb-3">
				<span class="input-group-text">Festival Start Date</span>
				<input @bind="FestivalMap.FestivalStartDate" @onblur="TriggerAutoSave" type="date" class="form-control" />
			</div>
		</div>

		<div>
			<div id=MapContainer class="map-container" @ref="MapContainerRef" @onclick="OnMapClick">
				
				<img class="map" src="data:image/png;base64,@FestivalMap.FestivalMapBase64" @ref="MapImageRef" @onload="GetMapImageSize" />

				@foreach (var stage in FestivalMap.Stages)
				{
					<div class="stage d-flex justify-content-center align-items-center text-white text-center"
							style="top: @(stage.StageLocation.Y * MapImageHeight)px; 
									left: @(stage.StageLocation.X * MapImageWidth)px; 
									background-color: @stage.StageBg; 
									border: 1px solid @stage.StageColor;">

						<span>@stage.StageName</span>
					</div>
				}
			</div>
		</div>
	}
</div>

<script>
    window.getImageSize = (imgElement) => {
		
		InitHammer();

        const rect = imgElement.getBoundingClientRect();
        return {
            width: rect.width,
            height: rect.height
        };
    };


	let ticking = false;
	function updateTransform() {
		const transform = `translate(${posX}px, ${posY}px) scale(${scale})`;
		el.style.transform = transform;
		ticking = false;
	}

	function InitHammer()
	{
		var myElement = document.getElementById('MapContainer');

		// create a simple instance
		// by default, it only adds horizontal recognizers
		var mc = new Hammer(myElement);
		mc.get('pinch').set({ enable: true });

		var posX = 0,
			posY = 0,
			scale = 1,
			last_scale = 1,
			last_posX = 0,
			last_posY = 0,
			max_pos_x = 0,
			max_pos_y = 0,
			transform = "",
			el = myElement;

		// listen to events...
		mc.on("pan pinch panend pinchend", function(ev) {
			//pan    
			if (scale != 1) {
				posX = last_posX + ev.deltaX;
				posY = last_posY + ev.deltaY;
				max_pos_x = Math.ceil((scale - 1) * el.clientWidth / 2);
				max_pos_y = Math.ceil((scale - 1) * el.clientHeight / 2);
				if (posX > max_pos_x) {
					posX = max_pos_x;
				}
				if (posX < -max_pos_x) {
					posX = -max_pos_x;
				}
				if (posY > max_pos_y) {
					posY = max_pos_y;
				}
				if (posY < -max_pos_y) {
					posY = -max_pos_y;
				}
			}

			if (!ticking) {
				window.requestAnimationFrame(updateTransform);
				ticking = true;
			}

			//pinch
			if (ev.type == "pinch") {
				scale = Math.max(.999, Math.min(last_scale * (ev.scale), 4));
			}
			if(ev.type == "pinchend"){last_scale = scale;}

			//panend
			if(ev.type == "panend"){
				last_posX = posX < max_pos_x ? posX : max_pos_x;
				last_posY = posY < max_pos_y ? posY : max_pos_y;
			}

			if (scale != 1) {
				transform =
					"translate3d(" + posX + "px," + posY + "px, 0) " +
					"scale3d(" + scale + ", " + scale + ", 1)";
			}

			if (transform) {
				el.style.webkitTransform = transform;
			}
		});
	}

</script>

<style>
	.map-container {
		position: relative; 
		display: inline-block; 
		width: 100%;
	}

	.map {
		width: 100%;
		height: auto;
	}

	.stage {
		position: absolute;
		width: @($"{stageMarkerRadius * 2}px"); 
		height: @($"{stageMarkerRadius * 2}px"); 
		border: 1px solid #ff0000; 
		background-color: #ff0000bf;
		border-radius: 50%; 
		transform: translate(-50%, -50%); 
		pointer-events: none;

		color: #fff;
		font-size: 0.65rem;
		font-weight: bold;
		cursor: pointer;
		overflow: hidden;
		white-space: wrap;
		text-overflow: ellipsis;
		padding: 2px;
	}
</style>

<StageModal 
	Stage="SelectedStage"
	FestivalStartDate="FestivalMap.FestivalStartDate"
	OnClose="SaveAndCloseStageModal"
	OnDeleteStage="DeleteStage"
	AutoSave="TriggerAutoSave" />


@code {
	[Parameter]
	public string? FestivalId { get; set; }

	private FestivalMap FestivalMap = new()
	{
		Stages = new List<Stage>()
	};

	private ElementReference MapImageRef;
	private ElementReference MapContainerRef;

	private double MapImageWidth;
	private double MapImageHeight;

	private int stageIdCounter = 1;

	private Stage? SelectedStage;

	private int stageMarkerRadius = 25;
	private bool savePending;

	private string LastSaved;

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrEmpty(this.FestivalId))
		{
			FestivalMap = new() { Id = Guid.NewGuid().ToString(), Stages = new List<Stage>() };
			await PickImage();

			if (string.IsNullOrEmpty(FestivalMap.FestivalMapBase64))
			{
				// no image selected, redirect back to home
				NavigationManager.NavigateTo("/");
			}
			return;
		}

		var loadedFestivalMap = await MapStorageService.GetFestivalMapAsync(this.FestivalId);
		if (loadedFestivalMap == null)
		{
			// redirect back to the home page if the festival map cannot be loaded
			NavigationManager.NavigateTo("/");
			return;
		}

		FestivalMap = loadedFestivalMap;
		DetectScheduleConflicts();
	}

	private Timer? _saveDebounceTimer;
	private void TriggerAutoSave()
	{
		_saveDebounceTimer?.Dispose();
		_saveDebounceTimer = new Timer(async _ =>
		{
			await InvokeAsync(async () =>
			{
				await AutoSaveAsync();
			});
		}, null, 500, Timeout.Infinite);
	}

	private async Task AutoSaveAsync()
	{
		DetectScheduleConflicts();

		if (savePending || string.IsNullOrWhiteSpace(FestivalMap.FestivalName))
		{
			return;
		}

		savePending = true;
		await MapStorageService.SaveMapAsync(FestivalMap);

		var saveDateTime = DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss.fff tt");
		LastSaved = $"Last Saved: {saveDateTime}";

		savePending = false;
	}


	private async Task DeleteStage()
	{
		if (SelectedStage != null)
		{
			FestivalMap.Stages.Remove(SelectedStage);

			SelectedStage = null;
			DetectScheduleConflicts();
		}

		if (!FestivalMap.Stages.Any())
		{
			await Task.Delay(100);
			StateHasChanged();
		}

		TriggerAutoSave();
	}

	private async Task SaveCurrentMap()
	{
		if (!string.IsNullOrEmpty(FestivalMap.FestivalName))
		{
			await MapStorageService.SaveMapAsync(FestivalMap);
		}
	}

	private string RandomStageColor()
	{
		var random = new Random();
		var color = $"#{random.Next(0x1000000):X6}";

		return color;
	}

	private string GetStageName(string stageId)
	{
		return FestivalMap.Stages.FirstOrDefault(x => x.Id == stageId).StageName;
	}

	private void ResetAllConflicts()
	{
		var allArtist = FestivalMap.Stages.SelectMany(x => x.Artists).ToList();
		foreach (var artist in allArtist)
		{
			artist.Conflicts = new List<string>();
		}
	}

	private void DetectScheduleConflicts()
	{
		ResetAllConflicts();

		var allArtists = FestivalMap.Stages.SelectMany(s => s.Artists.Select(a => new
		{
			StageId = s.Id,
			StageName = s.StageName,
			Artist = a,
			Start = a.SetTimeStart,
			End = a.SetTimeEnd
		})).ToList();

		for (int i = 0; i < allArtists.Count; i++)
		{
			for (int j = i + 1; j < allArtists.Count; j++)
			{
				var a1 = allArtists[i];
				var a2 = allArtists[j];

				// skip same artist
				if (a1.Artist.Id == a2.Artist.Id)
				{
					continue;
				}

				var a1StartsBeforeA2End = a1.Start < a2.End;
				var a2StartsBeforeA1End = a2.Start < a1.End;

				bool overlaps = a1StartsBeforeA2End && a2StartsBeforeA1End;

				if (overlaps)
				{
					var a1ConflictMessage = $"CONFLICT: {a2.Artist.Name} ({a2.StageName}) at {a2.Artist.SetTimeStart.ToLocalTime().ToString("t")} - {a2.Artist.SetTimeEnd.ToLocalTime().ToString("t")}";
					if (!a1.Artist.Conflicts.Contains(a1ConflictMessage))
					{
						a1.Artist.Conflicts.Add(a1ConflictMessage);
					}

					var a2ConflictMessage = $"CONFLICT: {a1.Artist.Name} ({a1.StageName}) at {a1.Artist.SetTimeStart.ToLocalTime().ToString("t")} - {a1.Artist.SetTimeEnd.ToLocalTime().ToString("t")}";
					if (!a2.Artist.Conflicts.Contains(a2ConflictMessage))
					{
						a2.Artist.Conflicts.Add(a2ConflictMessage);
					}
				}
			}
		}

		StateHasChanged();
	}


	private async Task GetMapImageSize()
	{
		var size = await JS.InvokeAsync<DomRect>("getImageSize", MapImageRef);
		MapImageWidth = size.Width;
		MapImageHeight = size.Height;
	}

	private Task SaveAndCloseStageModal()
	{
		SelectedStage = null;
		TriggerAutoSave();

		return Task.CompletedTask;
	}

	private async Task SaveStageChanges()
	{
		// All data is bound to the selected stage, so we just close
		SelectedStage = null;
		await SaveCurrentMap();
	}

	private void EditStage(string id)
	{
		SelectedStage = FestivalMap.Stages.FirstOrDefault(x => x.Id == id);	
	}

	private async Task OnMapClick(MouseEventArgs e)
	{
		// don't add stage markers when in edit mode or there is no map size
		if (MapImageHeight == 0 || MapImageWidth == 0)
		{
			return;
		}

		var clickBuffer = 10;

		var clickX = e.OffsetX;
		var clickY = e.OffsetY;

		// check if existing stage has been clicked
		foreach (var stage in FestivalMap.Stages)
		{
			var stageX = stage.StageLocation.X * MapImageWidth;
			var stageY = stage.StageLocation.Y * MapImageHeight;

			var dx = clickX - stageX;
			var dy = clickY - stageY;

			var distance = Math.Sqrt(dx * dx + dy * dy);

			if (distance <= (stageMarkerRadius + clickBuffer))
			{
				EditStage(stage.Id);
				return;
			}
		}


		// Convert to relative coordinates
		var relativeX = e.OffsetX / MapImageWidth;
		var relativeY = e.OffsetY / MapImageHeight;

		await AddStage(relativeX, relativeY);
	}

	private async Task AddStage(double x, double y)
	{
		var newStage = new Stage
			{
				StageName = $"Stage {stageIdCounter - 1}",
				StageLocation = new Point(x, y),
				Artists = new List<Artist>(),
				StageColor = RandomStageColor()
			};

		FestivalMap.Stages.Add(newStage);
		stageIdCounter++;

		TriggerAutoSave();
	}


	private async Task PickImage()
	{
		var base64 = await ImagePickerService.PickImageAsBase64Async();
		if (base64 != null)
		{
			FestivalMap.FestivalMapBase64 = base64;
		}
	}

    [Inject] private IJSRuntime JS { get; set; }
}
