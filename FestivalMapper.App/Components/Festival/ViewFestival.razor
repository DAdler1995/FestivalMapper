@page "/festival/{Id:guid}"

@using FestivalMapper.App.Interfaces
@using FestivalMapper.App.Models
@using FestivalMapper.App.Services

@if (_festival is null)
{
    <p class="text-muted">Festival not found.</p>
}
else
{
    <PageSection Title="@_festival.Name">
        <Actions>
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary"><i class="bi bi-floppy"></i> Save</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="EditFestival"><i class="bi bi-pencil"></i> Edit</button>
                <button type="button" class="btn btn-outline-danger"><i class="bi bi-trash"></i> Delete</button>
            </div>
        </Actions>

        <ChildContent>
            <p class="text-muted">
                @_festival.StartDate.ToString("MMM d yyyy") - @_festival.EndDate.ToString("MMM d yyyy")
                @if (!string.IsNullOrWhiteSpace(_festival.City))
                {
                    <text> • @_festival.City, @_festival.State</text>
                }
            </p>
        </ChildContent>
    </PageSection>
}

@code {
    // inject
    [Inject] private IFestivalService FestivalService { get; set; } = default!;
    [Inject] private NavigationManager NavManager { get; set; } = default!;
    [Inject] private FestivalSelectionState SelectionState { get; set; } = default!;

    // parameters
    [Parameter] public Guid Id { get; set; }

    // variables
    private FestivalModel? _festival;

    protected override async Task OnParametersSetAsync()
    {
        _festival = await FestivalService.GetFestivalAsync(Id);

        if (_festival is null)
        {
            NavManager.NavigateTo("/");
            return;
        }

        SelectionState.Select(_festival.Id);
    }

    private async Task Save()
    {
        if (_festival is null)
        {
            return;
        }

        await FestivalService.SaveFestivalAsync(_festival);
    }

    private async Task Delete()
    {
        await FestivalService.DeleteFestivalAsync(Id);
        NavManager.NavigateTo("/");
    }

    private void EditFestival()
    {
        NavManager.NavigateTo($"/festival/{Id}/edit");
    }

}
