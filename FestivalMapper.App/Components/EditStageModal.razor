@using FestivalMapper.App.Models

@inject IJSRuntime JS

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">Edit Stage</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-12">
                                <div class="input-group mb-3">
                                    <span class="input-group-text">Stage Name</span>
                                    <input id="stageName" type="text" class="form-control" @bind="Stage.StageName" />
                                    <button class="btn btn-danger float-end" @onclick="() => DeleteStage()">🗑️</button>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <div class="input-group mb-3">
                                    <span class="input-group-text">Description</span>
                                    <textarea id="stageDesc" class="form-control" rows="3" @bind="Stage.StageDescription"></textarea>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <div class="input-group mb-3">
                                    <span class="input-group-text">Stage Color</span>
                                    <input class="form-control" type="color" @bind="Stage.StageColor"></input>
                                </div>
                            </div>
                        </div>

                        <hr />

                        <h6>Artists</h6>
                            @foreach (var artist in Stage.Artists.OrderBy(a => a.SetTimeStart))
                            {

                                <div class="mb-3 w-100" @onclick="() => EditArtist(artist.Id)">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="flex-fill">
                                            <strong class="@(IsArtistConflicting(artist.Id) ? "text-danger" : "")">@artist.Name</strong>
                                            <button class="btn btn-sm btn-danger float-end" @onclick="() => RemoveArtist(artist.Id)">🗑️</button>
                                            <br />
                                            <small>
                                                @artist.SetTimeStart.ToLocalTime().ToShortDateString() @artist.SetTimeStart.ToLocalTime().ToString("t") – @(artist.SetDurationMinutes.HasValue? artist.SetTimeStart.AddMinutes(artist.SetDurationMinutes.Value).ToLocalTime().ToString("t") : "NO END TIME")
                                            </small>
                                            @if (!string.IsNullOrWhiteSpace(artist.Description))
                                            {
                                                <p class="mt-2 mb-0">@artist.Description</p>
                                            }

                                            @foreach (var conflictMessage in GetConflictMessage.Invoke(artist.Id))
                                            {
                                                <p style="font-size: 75%" class="text-danger m-0 p-0">@conflictMessage</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }

                        <hr />

                        <h6>Add Artist</h6>
                        <div class="row g-2">
                            <div class="col-6">
                                <input class="form-control" placeholder="Name" @bind="NewArtist.Name" />
                            </div>
                            <div class="col-6">
                                <input class="form-control" placeholder="Start Time" type="datetime-local" @bind="NewArtist.SetTimeStart" />
                            </div>
                        </div>
                        <div class="mt-2">
                            <input class="form-control" placeholder="Description" @bind="NewArtist.Description" />
                        </div>
                        <div class="mt-2 row g-2">
                            <div class="col-6">
                                <input class="form-control" placeholder="Duration (min)" type="number" min="0" @bind="NewArtist.SetDurationMinutes" />
                            </div>
                            <div class="col-6 d-flex align-items-end justify-content-end">
                                <button class="btn btn-sm btn-primary" @onclick="SaveArtist">Save Artist</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Stage Stage { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public Func<string, bool>? IsArtistConflicting { get; set; } = _ => false;
    [Parameter] public EventCallback OnArtistChange { get; set; }
    [Parameter] public Func<string, List<string>>? GetConflictMessage { get; set; }
    [Parameter] public EventCallback OnDeleteStage { get; set; }
    [Parameter] public DateTime? FestivalStartDate { get; set; }

    private Artist NewArtist = new();

    protected override void OnParametersSet()
    {
        // Set default artist time when modal opens
        NewArtist.SetTimeStart = FestivalStartDate ?? DateTime.Now;        
    }

    private void EditArtist(string id)
    {
        var existingArtist = Stage.Artists.FirstOrDefault(x => x.Id == id);
        if (existingArtist != null)
        {
            NewArtist = existingArtist;
            StateHasChanged();
        }
    }

    private async Task SaveArtist()
    {
        if (string.IsNullOrWhiteSpace(NewArtist.Name))
        {
            return;
        }

        if (NewArtist.SetDurationMinutes == 0)
        {
            NewArtist.SetDurationMinutes = null;
        }

        var existingArtist = Stage.Artists.FirstOrDefault(x => x.Id == NewArtist.Id);
        if (existingArtist != null)
        {
            existingArtist = NewArtist;
            NewArtist = new() { SetTimeStart = FestivalStartDate ?? DateTime.Now };
            return;
        }

        var artist = new Artist
        {
            Name = NewArtist.Name,
            Description = NewArtist.Description,
            SetTimeStart = NewArtist.SetTimeStart.ToUniversalTime(),
            SetTimeEnd = NewArtist.SetDurationMinutes.HasValue ? NewArtist.SetTimeStart.AddMinutes(NewArtist.SetDurationMinutes.Value).ToUniversalTime() : null,
            SetDurationMinutes = NewArtist.SetDurationMinutes
        };

        Stage.Artists.Add(artist);

        NewArtist = new() { SetTimeStart = FestivalStartDate ?? DateTime.Now };

        await OnArtistChange.InvokeAsync(null);
    }

    private async Task RemoveArtist(string id)
    {

        var artist = Stage.Artists.FirstOrDefault(a => a.Id == id);
        if (artist != null)
        {
            var confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this artist set \"{artist.Name}\"?");

            if (confirm)
            {
                Stage.Artists.Remove(artist);
                await OnArtistChange.InvokeAsync(null);
            }
        }

    }

    private async Task Close()
    {
        await OnClose.InvokeAsync(null);
    }

    private async Task Save()
    {
        await OnSave.InvokeAsync(null);
    }

    private async Task DeleteStage()
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the stage \"{Stage.StageName}\"?");
        if (confirm)
        {
            await OnDeleteStage.InvokeAsync(null);
        }
    }
}
