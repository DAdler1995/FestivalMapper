@using FestivalMapper.App.Models

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">Edit Stage</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-12">
                                <div class="input-group mb-3">
                                    <span class="input-group-text">Stage Name</span>
                                    <input id="stageName" type="text" class="form-control" @bind="Stage.StageName" />
                                    <button class="btn btn-danger float-end" @onclick="() => DeleteStage()">🗑️</button>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <div class="input-group mb-3">
                                    <span class="input-group-text">Stage Color</span>
                                    <input class="form-control" type="color" @bind="Stage.StageColor"></input>
                                </div>
                            </div>
                        </div>

                        <hr />

                        <h6>Artists</h6>
                        <Virtualize Items="SortedUpcomingArtists" Context="artist">
                            <div class="mb-3 w-100" @onclick="() => EditArtist(artist.Id)">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="flex-fill">
                                        <strong class="@(artist.ConflictingSets.Any() ? "text-danger" : "")">@artist.Name</strong>

                                        <button class="btn btn-sm btn-danger float-end"
                                                @onclick:stopPropagation="true"
                                                @onclick="() => RemoveArtist(artist.Id)">
                                            🗑️
                                        </button>

                                        <br />
                                        <small>
                                            @artist.SetTimeStart.ToLocalTime().ToShortDateString() @artist.SetTimeStart.ToLocalTime().ToString("t") – @(artist.SetTimeEnd.ToLocalTime().ToString("t"))
                                        </small>

                                        @foreach (var conflictMessage in artist.ConflictingSets.Select(x => x.ConflictMessage))
                                        {
                                            <p style="font-size: 75%" class="text-danger m-0 p-0">@conflictMessage</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </Virtualize>

                        <button class="btn btn-outline-secondary" data-bs-toggle="collapse" data-bs-target="#PastSets">View Past Sets</button>
                        <div id="PastSets" class="collapse opacity-50">
                            <div class="mt-3"></div>
                            <Virtualize Items="SortedPastArtists" Context="artist">
                                <div class="mb-3 w-100" @onclick="() => EditArtist(artist.Id)">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="flex-fill">
                                            <strong class="@(artist.ConflictingSets.Any() ? "text-danger" : "")">@artist.Name</strong>
                                            <br />
                                            <small>
                                                @artist.SetTimeStart.ToLocalTime().ToShortDateString() @artist.SetTimeStart.ToLocalTime().ToString("t") – @(artist.SetTimeEnd.ToLocalTime().ToString("t"))
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            </Virtualize>
                        </div>

                        <hr />

                        <button class="btn btn-success">Add Artist</button>

                        <h6>Add Artist</h6>
                        <div class="row mb-2">
                            <div class="col-12">
                                <div class="input-group">
                                    <span class="input-group-text">Artist Name</span>
                                    <input class="form-control" placeholder="Name" @bind="NewArtist.Name" />
                                </div>
                            </div>
                        </div>

                        <div class="row mb-2">
                            <div class="col-12">
                                <div class="input-group">
                                    <span class="input-group-text">Set Start Time</span>
                                    <InputDate Type="InputDateType.DateTimeLocal" TValue="DateTime" class="form-control" Value="ArtistStartTimeLocal" ValueExpression="() => ArtistStartTimeLocal" ValueChanged="(value) => UpdateEndTime(value)"></InputDate>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-2">
                            <div class="col-12">
                                <div class="input-group">
                                    <span class="input-group-text">Set End Time</span>
                                    <InputDate class="form-control" Type="InputDateType.DateTimeLocal" TValue="DateTime" Value="ArtistEndTimeLocal" ValueExpression="() => ArtistEndTimeLocal"></InputDate>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <button class="btn btn-success" @onclick="SaveArtist">Save Artist</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Stage Stage { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnArtistChange { get; set; }
    [Parameter] public EventCallback OnDeleteStage { get; set; }
    [Parameter] public DateTime FestivalStartDate { get; set; } = DateTime.Now;
    [Parameter] public EventCallback AutoSave { get; set; }

    [Inject] private IJSRuntime JS { get; set; }

    private Artist NewArtist = new();
    private DateTime ArtistStartTimeLocal;
    private DateTime ArtistEndTimeLocal;

    private List<Artist> SortedUpcomingArtists => Stage.Artists.Where(x => x.SetTimeEnd.ToLocalTime() > DateTime.Now).OrderBy(a => a.SetTimeStart).ToList();
    private List<Artist> SortedPastArtists => Stage.Artists.Where(x => x.SetTimeEnd.ToLocalTime() <= DateTime.Now).OrderBy(a => a.SetTimeStart).ToList();


    @code {
        protected override void OnAfterRender(bool firstRender)
        {
#if ANDROID
        if (IsVisible)
        {
            FestivalMapper.App.Platforms.Android.BackHandler.OnBackPressedOverride = () =>
            {
                IsVisible = false;
                StateHasChanged();
            };
        }
        else
        {
            FestivalMapper.App.Platforms.Android.BackHandler.OnBackPressedOverride = null;
        }
#endif
        }
    }


    private void ResetNewArtist()
    {
        ArtistStartTimeLocal = FestivalStartDate;
        ArtistEndTimeLocal = FestivalStartDate;

        NewArtist = new()
        {
            SetTimeStart = FestivalStartDate,
            SetTimeEnd = FestivalStartDate
        };
    }

    protected override void OnParametersSet()
    {
        // Set default artist time when modal opens
        ResetNewArtist();
        StateHasChanged();
    }

    private void UpdateEndTime(DateTime newStartTime)
    {
        if (NewArtist != null)
        {
            ArtistStartTimeLocal = newStartTime;
            ArtistEndTimeLocal = newStartTime.AddHours(1);
        }
    }

    private void EditArtist(string id)
    {
        var existingArtist = Stage.Artists.FirstOrDefault(x => x.Id == id);
        if (existingArtist != null)
        {
            ArtistStartTimeLocal = existingArtist.SetTimeStart.ToLocalTime();
            ArtistEndTimeLocal = existingArtist.SetTimeEnd.ToLocalTime();

            NewArtist = existingArtist;
        }
    }

    private async Task SaveArtist()
    {
        if (string.IsNullOrWhiteSpace(NewArtist.Name))
        {
            return;
        }

        var startTimeUtc = ArtistStartTimeLocal.ToUniversalTime();
        var endTimeUtc = ArtistEndTimeLocal.ToUniversalTime();

        var existingArtist = Stage.Artists.FirstOrDefault(x => x.Id == NewArtist.Id);
        if (existingArtist != null)
        {
            existingArtist.SetTimeStart = startTimeUtc;
            existingArtist.SetTimeEnd = endTimeUtc;
        }
        else
        {

            var artist = new Artist
            {
                Name = NewArtist.Name,
                SetTimeStart = startTimeUtc,
                SetTimeEnd = endTimeUtc,
                SetDurationMinutes = NewArtist.SetDurationMinutes
            };

            Stage.Artists.Add(artist);
        }

        await OnArtistChange.InvokeAsync(null);
        await AutoSave.InvokeAsync(null);

        ResetNewArtist();
    }

    private async Task RemoveArtist(string id)
    {

        var artist = Stage.Artists.FirstOrDefault(a => a.Id == id);
        if (artist != null)
        {
            var confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this artist set \"{artist.Name}\"?");

            if (confirm)
            {
                Stage.Artists.Remove(artist);
                await OnArtistChange.InvokeAsync(null);
                await AutoSave.InvokeAsync(null);
            }
        }

    }

    private async Task Close()
    {
        await OnClose.InvokeAsync(null);
        await AutoSave.InvokeAsync(null);
    }

    private async Task Save()
    {
        await OnSave.InvokeAsync(null);
        await AutoSave.InvokeAsync(null);
    }

    private async Task DeleteStage()
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the stage \"{Stage.StageName}\"?");
        if (confirm)
        {
            await OnDeleteStage.InvokeAsync(null);
            await AutoSave.InvokeAsync(null);
        }
    }
}
